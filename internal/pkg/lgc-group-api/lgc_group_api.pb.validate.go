// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ozonmp/lgc_group_api/v1/lgc_group_api.proto

package lgc_group_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Group with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Group) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GroupValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GroupValidationError{
				field:  "Updated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GroupValidationError is the validation error returned by Group.Validate if
// the designated constraints aren't met.
type GroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupValidationError) ErrorName() string { return "GroupValidationError" }

// Error satisfies the builtin error interface
func (e GroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupValidationError{}

// Validate checks the field values on GroupEvent with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GroupEvent) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Type

	if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GroupEventValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GroupEventValidationError{
				field:  "Group",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GroupEventValidationError is the validation error returned by
// GroupEvent.Validate if the designated constraints aren't met.
type GroupEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupEventValidationError) ErrorName() string { return "GroupEventValidationError" }

// Error satisfies the builtin error interface
func (e GroupEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupEventValidationError{}

// Validate checks the field values on DescribeGroupV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeGroupV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetGroupId() <= 0 {
		return DescribeGroupV1RequestValidationError{
			field:  "GroupId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// DescribeGroupV1RequestValidationError is the validation error returned by
// DescribeGroupV1Request.Validate if the designated constraints aren't met.
type DescribeGroupV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeGroupV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeGroupV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeGroupV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeGroupV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeGroupV1RequestValidationError) ErrorName() string {
	return "DescribeGroupV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeGroupV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeGroupV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeGroupV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeGroupV1RequestValidationError{}

// Validate checks the field values on DescribeGroupV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeGroupV1Response) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeGroupV1ResponseValidationError{
				field:  "Group",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribeGroupV1ResponseValidationError is the validation error returned by
// DescribeGroupV1Response.Validate if the designated constraints aren't met.
type DescribeGroupV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeGroupV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeGroupV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeGroupV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeGroupV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeGroupV1ResponseValidationError) ErrorName() string {
	return "DescribeGroupV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeGroupV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeGroupV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeGroupV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeGroupV1ResponseValidationError{}

// Validate checks the field values on CreateGroupV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateGroupV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 100 {
		return CreateGroupV1RequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
	}

	return nil
}

// CreateGroupV1RequestValidationError is the validation error returned by
// CreateGroupV1Request.Validate if the designated constraints aren't met.
type CreateGroupV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGroupV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGroupV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGroupV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGroupV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGroupV1RequestValidationError) ErrorName() string {
	return "CreateGroupV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGroupV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGroupV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGroupV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGroupV1RequestValidationError{}

// Validate checks the field values on CreateGroupV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateGroupV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GroupId

	return nil
}

// CreateGroupV1ResponseValidationError is the validation error returned by
// CreateGroupV1Response.Validate if the designated constraints aren't met.
type CreateGroupV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGroupV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGroupV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGroupV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGroupV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGroupV1ResponseValidationError) ErrorName() string {
	return "CreateGroupV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGroupV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGroupV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGroupV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGroupV1ResponseValidationError{}

// Validate checks the field values on UpdateGroupV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateGroupV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetGroupId() <= 0 {
		return UpdateGroupV1RequestValidationError{
			field:  "GroupId",
			reason: "value must be greater than 0",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 100 {
		return UpdateGroupV1RequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
	}

	return nil
}

// UpdateGroupV1RequestValidationError is the validation error returned by
// UpdateGroupV1Request.Validate if the designated constraints aren't met.
type UpdateGroupV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupV1RequestValidationError) ErrorName() string {
	return "UpdateGroupV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGroupV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroupV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupV1RequestValidationError{}

// Validate checks the field values on UpdateGroupV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateGroupV1Response) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateGroupV1ResponseValidationError is the validation error returned by
// UpdateGroupV1Response.Validate if the designated constraints aren't met.
type UpdateGroupV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupV1ResponseValidationError) ErrorName() string {
	return "UpdateGroupV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGroupV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroupV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupV1ResponseValidationError{}

// Validate checks the field values on ListGroupV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListGroupV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetOffset() < 0 {
		return ListGroupV1RequestValidationError{
			field:  "Offset",
			reason: "value must be greater than or equal to 0",
		}
	}

	if m.GetLimit() < 0 {
		return ListGroupV1RequestValidationError{
			field:  "Limit",
			reason: "value must be greater than or equal to 0",
		}
	}

	return nil
}

// ListGroupV1RequestValidationError is the validation error returned by
// ListGroupV1Request.Validate if the designated constraints aren't met.
type ListGroupV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGroupV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGroupV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGroupV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGroupV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGroupV1RequestValidationError) ErrorName() string {
	return "ListGroupV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListGroupV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGroupV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGroupV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGroupV1RequestValidationError{}

// Validate checks the field values on ListGroupV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListGroupV1Response) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetGroups() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGroupV1ResponseValidationError{
					field:  fmt.Sprintf("Groups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListGroupV1ResponseValidationError is the validation error returned by
// ListGroupV1Response.Validate if the designated constraints aren't met.
type ListGroupV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGroupV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGroupV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGroupV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGroupV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGroupV1ResponseValidationError) ErrorName() string {
	return "ListGroupV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListGroupV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGroupV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGroupV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGroupV1ResponseValidationError{}

// Validate checks the field values on RemoveGroupV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveGroupV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetGroupId() <= 0 {
		return RemoveGroupV1RequestValidationError{
			field:  "GroupId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// RemoveGroupV1RequestValidationError is the validation error returned by
// RemoveGroupV1Request.Validate if the designated constraints aren't met.
type RemoveGroupV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveGroupV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveGroupV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveGroupV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveGroupV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveGroupV1RequestValidationError) ErrorName() string {
	return "RemoveGroupV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveGroupV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveGroupV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveGroupV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveGroupV1RequestValidationError{}

// Validate checks the field values on RemoveGroupV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveGroupV1Response) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RemoveGroupV1ResponseValidationError is the validation error returned by
// RemoveGroupV1Response.Validate if the designated constraints aren't met.
type RemoveGroupV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveGroupV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveGroupV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveGroupV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveGroupV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveGroupV1ResponseValidationError) ErrorName() string {
	return "RemoveGroupV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveGroupV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveGroupV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveGroupV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveGroupV1ResponseValidationError{}
